// var rootUrl = 'https://gandalf.gcoos.org';
var rootUrl = '/static';
var chlorMin = 0;
var chlorMax = 10;
var chloromap = ['#d6f9cf', '#d5f8ce', '#d4f7cc', '#d3f6cb', '#d1f5c9', '#d0f4c8', '#cff3c6', '#cef2c5', '#ccf1c3', '#cbf0c2', '#caefc1', '#c9efbf', '#c7eebe', '#c6edbc', '#c5ecbb', '#c4ebb9', '#c2eab8', '#c1e9b7', '#c0e8b5', '#bfe7b4', '#bde7b2', '#bce6b1', '#bbe5b0', '#bae4ae', '#b8e3ad', '#b7e2ab', '#b6e1aa', '#b5e1a9', '#b3e0a7', '#b2dfa6', '#b1dea5', '#afdda3', '#aedca2', '#addba0', '#acdb9f', '#aada9e', '#a9d99c', '#a8d89b', '#a6d79a', '#a5d798', '#a4d697', '#a3d596', '#a1d495', '#a0d393', '#9fd392', '#9dd291', '#9cd18f', '#9bd08e', '#99cf8d', '#98cf8c', '#97ce8a', '#95cd89', '#94cc88', '#93cb87', '#91cb85', '#90ca84', '#8fc983', '#8dc882', '#8cc880', '#8bc77f', '#89c67e', '#88c57d', '#86c57c', '#85c47a', '#84c379', '#82c278', '#81c277', '#7fc176', '#7ec075', '#7cbf73', '#7bbf72', '#79be71', '#78bd70', '#76bc6f', '#75bc6e', '#73bb6d', '#72ba6c', '#70b96b', '#6fb969', '#6db868', '#6cb767', '#6ab766', '#68b665', '#67b564', '#65b563', '#64b462', '#62b361', '#60b260', '#5eb260', '#5db15f', '#5bb05e', '#59b05d', '#57af5c', '#55ae5b', '#53ae5a', '#52ad5a', '#50ac59', '#4eab58', '#4cab57', '#4aaa57', '#47a956', '#45a956', '#43a855', '#41a754', '#3fa754', '#3da654', '#3aa553', '#38a453', '#36a452', '#34a352', '#32a252', '#2fa152', '#2da151', '#2ba051', '#299f51', '#279e51', '#259d51', '#239d51', '#219c51', '#1f9b50', '#1e9a50', '#1c9950', '#1a9850', '#199850', '#179750', '#159650', '#149550', '#139450', '#11934f', '#10924f', '#0f924f', '#0d914f', '#0c904f', '#0b8f4f', '#0a8e4f', '#0a8d4e', '#098c4e', '#088b4e', '#088a4e', '#078a4e', '#07894d', '#07884d', '#06874d', '#06864d', '#06854d', '#06844c', '#06834c', '#07824c', '#07814c', '#07814b', '#07804b', '#087f4b', '#087e4a', '#097d4a', '#097c4a', '#0a7b4a', '#0a7a49', '#0b7949', '#0b7849', '#0c7748', '#0c7748', '#0d7648', '#0d7547', '#0e7447', '#0e7346', '#0f7246', '#0f7146', '#107045', '#106f45', '#116e45', '#116e44', '#126d44', '#126c43', '#126b43', '#136a43', '#136942', '#146842', '#146741', '#146641', '#156640', '#156540', '#15643f', '#15633f', '#16623f', '#16613e', '#16603e', '#175f3d', '#175e3d', '#175e3c', '#175d3c', '#175c3b', '#185b3b', '#185a3a', '#18593a', '#185839', '#185739', '#195638', '#195638', '#195537', '#195437', '#195336', '#195236', '#195135', '#195034', '#195034', '#194f33', '#194e33', '#194d32', '#194c32', '#194b31', '#194a31', '#194930', '#19492f', '#19482f', '#19472e', '#19462e', '#19452d', '#19442c', '#19432c', '#19432b', '#19422b', '#19412a', '#194029', '#193f29', '#193e28', '#183d28', '#183d27', '#183c26', '#183b26', '#183a25', '#183924', '#173824', '#173723', '#173723', '#173622', '#173521', '#163421', '#163320', '#16321f', '#16311f', '#16311e', '#15301d', '#152f1d', '#152e1c', '#152d1b', '#142c1b', '#142b1a', '#142b19', '#132a19', '#132918', '#132817', '#122716', '#122616', '#122515', '#112514', '#112414']
function getHex(value, min, max) {
    index = parseInt(255 / max * value)
    hexString = chloromap[index];
    return hexString
}
function showLastPos(feature, map) {
    console.log("showLastPos()");
    console.log("Using public_name: " + feature.properties.public_name);
    var currPosIcon = L.icon({
        iconUrl: feature.properties.currPosIcon,
        iconSize: feature.properties.iconSize
    });
    var wpIcon = L.icon({
        iconUrl: feature.properties.wpIcon,
        iconSize: feature.properties.iconSize
    });
    lon = feature.geometry.coordinates[0];
    lat = feature.geometry.coordinates[1];
    bearing = 0;
    lastPos = L.marker([lat, lon], {
        icon: currPosIcon,
        rotationAngle: bearing
    });
    lastPos.bindPopup(feature.properties.html)
    lastPos.bindTooltip(feature.properties.public_name.toUpperCase());
    lastPos.addTo(map)
}
function makeLayer(the_markers) {
    console.log('makeLayer()...');
    theLayer = L.layerGroup();
    for (const marker of the_markers) {
        marker.addTo(theLayer);
    }
    return theLayer;
}
function makeSurfMarker(feature) {
    lon = feature.geometry.coordinates[0];
    lat = feature.geometry.coordinates[1];
    var circle = L.circleMarker([lat, lon], {
        radius: feature.properties.radius,
        color: feature.properties.marker_color,
        fillColor: feature.properties.fillColor,
        fillOpacity: feature.properties.opacity,
        weight: feature.properties.weight,
        opacity: feature.properties.fillOpacity
    });
    circle.bindPopup(feature.properties.html);
    return (circle)
}
function clearCworkerLayers() {
    console.log('clearCworkerLayers()...')
    tempLayer.remove();
    salinityLayer.remove();
    oxyLayer.remove();
}
function showCworker(map) {
    var data_file = rootUrl + '/data/gandalf/deployments/geojson/cworker.json'
    var temperature_markers = []
    var salinity_markers = []
    var oxy_markers = []
    console.log('showCworker(): fetching cworker.json');
    var fC = $.getJSON(data_file, function() {}).done(function() {
        L.geoJson(fC.responseJSON, {
            onEachFeature: function(feature, layer) {
                if (feature.id == 'track') {
                    console.log('showCworker(): Adding track...')
                    cwTrack = L.geoJson(feature, {
                        style: feature.properties.style
                    });
                    cwTrackLayer = L.layerGroup([cwTrack]);
                    cwTrackLayer.addTo(map);
                }
                if (feature.id == 'sea_water_temperature_marker') {
                    sm = makeSurfMarker(feature)
                    temperature_markers.push(sm)
                }
                if (feature.id == 'sea_water_practical_salinity_marker') {
                    sm = makeSurfMarker(feature);
                    salinity_markers.push(sm)
                }
                if (feature.id == 'volume_fraction_of_oxygen_in_sea_water_marker') {
                    sm = makeSurfMarker(feature);
                    oxy_markers.push(sm);
                }
                if (feature.id == 'last_pos') {
                    showLastPos(feature, map);
                }
            }
        })
        tempLayer = makeLayer(temperature_markers);
        salinityLayer = makeLayer(salinity_markers);
        oxyLayer = makeLayer(oxy_markers);
        tempLayer.addTo(map);
    })
    $("#cw_none").click(function() {
        console.log('Removing all CW Layers')
        isChecked = ($('#cw_none').prop('checked'));
        if (isChecked) {
            clearCworkerLayers();
        }
    });
    $("#cworker_track").click(function() {
        isChecked = ($('#cworker_track').prop('checked'));
        if (isChecked) {
            console.log('Adding cworker_track layer...')
            cwTrackLayer.addTo(map)
        } else {
            console.log('Removing CW track layer...')
            cwTrackLayer.remove();
        }
    });
    $("#cw_temp").click(function() {
        isChecked = ($('#cw_temp').prop('checked'));
        if (isChecked) {
            console.log('Adding CW temp layer...')
            tempLayer.addTo(map)
        }
    });
    $("#cw_psal").click(function() {
        isChecked = ($('#cw_psal').prop('checked'));
        if (isChecked) {
            clearCworkerLayers();
            console.log('Adding CW Salinity layer...')
            salinityLayer.addTo(map)
        }
    });
    $("#cw_oxy").click(function() {
        isChecked = ($('#cw_oxy').prop('checked'));
        if (isChecked) {
            clearCworkerLayers();
            console.log('Adding CW Oxy layer...')
            oxyLayer.addTo(map)
        }
    });
    $("#cworker_track").click(function() {
        isChecked = ($('#cworker_track').prop('checked'));
        if (isChecked) {
            console.log('Adding cworker_track layer...')
            cwTrackLayer.addTo(map)
        } else {
            console.log('Removing CW track layer...')
            cwTrackLayer.remove();
        }
    });
}
var depthSlider = [0, -10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -200, -300, -400, -500, -600, -700, -800, -900, -1000];
function initPortalMap(vehicle_type, json_file) {
    console.log("initPortalMap()");
    var portalMap = L.map('portalMap', {
        zoomControl: false
    });
    portalMap.setView([31, -88.7], 6);
    L.control.zoom({
        position: 'bottomright'
    }).addTo(portalMap);
    var esri_url = "https://server.arcgisonline.com/ArcGIS/rest/services/" + "Ocean_Basemap/MapServer/tile/{z}/{y}/{x}";
    var esri_attribution = "Tiles &copy; Esri &mdash; Sources: GEBCO, NOAA"
    var openOcean = L.tileLayer(noaa_charts, {
        attribution: esri_attribution,
        maxZoom: 17,
        maxNativeZoom: 13,
        opacity: 1
    }).addTo(portalMap);
    portalMap.scrollWheelZoom.disable();
    L.control.coordinates({
        position: "bottomleft",
        decimals: 4,
        decimalSeperator: "."
    }).addTo(portalMap);
    if (vehicle_type == 'slocum') {
        showLocalVehicles(portalMap, json_file);
    }
    if (vehicle_type == 'navocean') {
        showNavoceanColorMap(portalMap, json_file);
    }
}
function parseBoolValue(value) {
    var new_value;
    if (value === undefined)
        new_value = false;
    if (value === 'true' || value == true)
        new_value = true;
    else if (value === 'false' || value == false)
        new_value = false;
    else
        new_value = false;
    return new_value;
}
;function initGANDALF(map_center, map_zoom) {
    var fleet_id = "5c1d509d5199afbbabc42c87c8a8ecc3";
    console.log('initGANDALF()');
    gandalfMap = L.map('map', {
        zoomControl: false,
    });
    gandalfMap.setView(map_center, map_zoom);
    L.control.zoom({
        position: 'bottomright'
    }).addTo(gandalfMap);
    var esri_url = ("https://server.arcgisonline.com/ArcGIS/rest/services/" + "NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}");
    var esri_attribution = "Tiles &copy; Esri &mdash; Sources: GEBCO, NOAA"
    var esri_tiles = L.tileLayer(esri_url, {
        attribution: esri_attribution,
        maxZoom: 17,
        maxNativeZoom: 10,
        opacity: 1
    });
    esri_tiles.addTo(gandalfMap);
    gandalfMap.scrollWheelZoom.enable();
    gandalfMap.doubleClickZoom.enable();
    L.control.coordinates({
        position: "bottomleft",
        decimals: 4,
        decimalSeperator: "."
    }).addTo(gandalfMap);
    $("#lsuSST").click(function() {
        console.log("click #lsuSST#lsuSST#lsuSST");
        sstLegend();
    });
    $("#gcoos_gliders").click(function() {
        $("#new-dash").hide();
        $("#gcoos_gliders").toggle();
    });
    $('#sum_deployments').text('32');
    $("#layerControl").click(function() {
        $("#new-dash").hide();
        $("#gLayers").toggle();
    });
    $("#dash-button").click(function() {
        $("#new-dash").toggle();
        $("#gLayers").hide();
    });
    $("#ais-all").click(function() {
        $('#map').hide();
        $('#plotWrapper').hide();
        $("#ais_map").show();
        $('#new-dash').hide();
        console.log('ALL');
    });
    $("#ais-fleet").click(function() {
        $('#map').hide();
        $('#plotWrapper').hide();
        $("#ais_map").show();
        $('#new-dash').hide();
        console.log('FLEET');
    });
    $("#closePlot").click(function() {
        $("#plotWrapper *:not('#closePlot')").remove();
        $("#plotWrapper").hide();
        $("#map").show();
        gandalfMap.invalidateSize();
    });
    $("#closePlot3D").click(function() {
        $(".plot3D").remove();
        $("#plotWrapper3D").hide();
        $("#map").show();
        gandalfMap.invalidateSize();
    });
    var data_file = rootUrl + '/data/gandalf/deployments/geojson/local.json'
    showLocalVehicles(gandalfMap, data_file);
    var data_file = rootUrl + '/data/gandalf/deployments/geojson/seagliders.json'
    showSeaGliders(gandalfMap, data_file);
    var data_file = rootUrl + '/data/gandalf/deployments/geojson/erddap.json'
    showErddapVehicles(gandalfMap, data_file);
    var data_file = rootUrl + '/data/gandalf/deployments/geojson/gdac.json'
    showErddapVehicles(gandalfMap, data_file);
    var random = Math.random()
    var data_file = rootUrl + '/data/gandalf/deployments/geojson/wg.json?random=' + random
    console.log('Using ' + data_file)
    showWaveGliders(gandalfMap, data_file);
    var data_file = rootUrl + '/data/gandalf/deployments/geojson/argo.json'
    showArgoFloats(gandalfMap, data_file)
    var data_file = rootUrl + '/data/gandalf/deployments/geojson/seatrec.json'
    showSeatrecFloats(gandalfMap, data_file)
    var data_file = rootUrl + '/data/gandalf/deployments/geojson/ugos.json'
    showUgosFloats(gandalfMap, data_file)
    addHycom(gandalfMap);
    $("#new-dash").delay(10000).fadeOut(2500, function() {
        mobile = isMobile();
        if (mobile == false) {
            initLayers();
            console.log('LAYERS ENABLED')
        }
    });
}
function isMobile() {
    try {
        document.createEvent("TouchEvent");
        return true;
    } catch (e) {
        return false;
    }
}
function makeWgSurfMarker(feature) {
    lon = feature.geometry.coordinates[0];
    lat = feature.geometry.coordinates[1];
    radius = feature.properties.radius;
    radius_divisor = 9;
    radius = parseInt(Math.abs(feature.properties.days_wet / radius_divisor));
    zindex = radius * 25000;
    var circle = L.circleMarker([lat, lon], {
        radius: radius,
        color: feature.properties.marker_color,
        fillColor: feature.properties.fillColor,
        fillOpacity: feature.properties.opacity,
        weight: feature.properties.weight,
        opacity: feature.properties.fillOpacity,
        zIndexOffset: zindex
    });
    circle.bindPopup(feature.properties.html);
    return (circle)
}
function showWaveGliders(map, data_file) {
    console.log('showWaveGliders()');
    config_file = rootUrl + '/data/gandalf/gandalf_configs/vehicles/sv3-076/sv3-076.cfg';
    var config = $.getJSON(config_file, function() {}).done(function() {
        var layers = config.responseJSON.surf_marker_layers;
        layers.forEach(layer=>window[layer] = L.layerGroup());
        WG_Water_Temp_Layer.addTo(gandalfMap);
    })
    var fC = $.getJSON(data_file, function() {}).done(function() {
        L.geoJson(fC.responseJSON, {
            onEachFeature: function(feature, layer) {
                if (feature.properties.index == 0) {
                    showLastPos(feature, gandalfMap);
                }
                if (feature.id == 'water_temperature') {
                    marker = makeWgSurfMarker(feature)
                    WG_Water_Temp_Layer.addLayer(marker);
                }
                if (feature.id == 'salinity') {
                    marker = makeWgSurfMarker(feature)
                    WG_Sal_Layer.addLayer(marker);
                }
                if (feature.id == 'air_temperature') {
                    marker = makeWgSurfMarker(feature)
                    WG_Air_Temp_Layer.addLayer(marker);
                }
                if (feature.id == 'wind_speed') {
                    marker = makeWgSurfMarker(feature)
                    WG_Wind_Speed_Layer.addLayer(marker);
                }
                if (feature.id == 'wave_height') {
                    marker = makeWgSurfMarker(feature)
                    WG_Wave_Height_Layer.addLayer(marker);
                }
            }
        })
    })
}
function wgLayer(layer, image) {
    config_file = rootUrl + '/data/gandalf/gandalf_configs/vehicles/sv3-076/sv3-076.cfg';
    var config = $.getJSON(config_file, function() {}).done(function() {
        var layers = config.responseJSON.surf_marker_layers;
        layers.forEach(function(layer_name) {
            window[layer_name].remove();
        })
        var img_root = rootUrl + '/data/gandalf/deployments/legends/';
        var img = '<img src="' + img_root + image + '"></img>';
        layer.addTo(gandalfMap);
        $('#wgLegend').html(img);
        $('#wgLegend').show();
    })
}
function initLayers() {
    console.log('initLayers()');
    layersNS.weatherNOAALayer.addTo(gandalfMap);
    layersNS.weatherNOAALayer.setOpacity(100);
    layersNS.gebcoGridLayer.addTo(gandalfMap);
    layersNS.gebcoGridLayer.setOpacity(0);
    layersNS.noaaBagServerLayer.addTo(gandalfMap);
    layersNS.noaaBagServerLayer.setOpacity(0);
    layersNS.noaaBuoysLayer.addTo(gandalfMap);
    layersNS.noaaBuoysLayer.setOpacity(0);
    layersNS.noaaDepthsLayer.addTo(gandalfMap);
    layersNS.noaaDepthsLayer.setOpacity(0);
    layersNS.nwsNexrad.addTo(gandalfMap);
    layersNS.nwsNexrad.setOpacity(0);
    gibsMODIS1.addTo(gandalfMap);
    gibsMODIS1.setOpacity(0);
    gibsMODIS2.addTo(gandalfMap);
    gibsMODIS2.setOpacity(0);
    gibsMODIS3.addTo(gandalfMap);
    gibsMODIS3.setOpacity(0);
    gibsSSTLayer.addTo(gandalfMap);
    gibsSSTLayer.setOpacity(0);
    layersNS.geostrophicLayer.addTo(gandalfMap);
    layersNS.geostrophicLayer.setOpacity(0);
    layersNS.rtofsSalinityLayer.addTo(gandalfMap);
    layersNS.rtofsSalinityLayer.setOpacity(0);
    layersNS.rtofsVelocityLayer.addTo(gandalfMap);
    layersNS.rtofsVelocityLayer.setOpacity(0);
    layersNS.rtofsSSHLayer.addTo(gandalfMap);
    layersNS.rtofsSSHLayer.setOpacity(0);
    layersNS.lsuSSTLayer.addTo(gandalfMap);
    layersNS.lsuSSTLayer.setOpacity(0);
    layersNS.hfrLayer6K.addTo(gandalfMap);
    layersNS.hfrLayer6K.setOpacity(0)
    layersNS.oceanPlatformsLayer.addTo(gandalfMap);
    layersNS.oceanPlatformsLayer.setOpacity(0);
    layersNS.eezLayer.addTo(gandalfMap);
    layersNS.eezLayer.setOpacity(0);
    console.log('RUTGERS DAC')
    layersNS.rutgersDACLayer.addTo(gandalfMap);
    layersNS.rutgersDACLayer.setOpacity(0);
}
function sstLegend() {
    var new_img = '<img src=' + lsu_sst_legend + '>';
    $('#wmsLegend').html(new_img);
    $('#wmsLegend').show();
}
function showLocalVehicles(map, data_file) {
    console.log('showLocalVehicles()');
    var localGliders = []
    var fC = $.getJSON(data_file, function() {}).done(function() {
        L.geoJson(fC.responseJSON, {
            onEachFeature: function(feature, layer) {
                if (feature.id == 'track') {
                    L.geoJson(feature, {
                        style: feature.properties.style
                    }).addTo(map);
                }
                if (feature.id == 'last_pos') {
                    showLastPos(feature, map);
                }
                if (feature.id == 'surf_marker') {
                    color = 'yellow';
                    lon = feature.geometry.coordinates[0];
                    lat = feature.geometry.coordinates[1];
                    var circle = L.circleMarker([lat, lon], {
                        radius: 3,
                        color: color,
                        fillColor: color,
                        fillOpacity: 1,
                        weight: .5,
                        opacity: 1,
                    });
                    circle.bindPopup(feature.properties.html);
                    localGliders.push(circle);
                }
            }
        })
        layersNS.localGliderLayer = L.layerGroup(localGliders);
        layersNS.localGliderLayer.addTo(map);
    })
}
function showErddapVehicles(map, data_file) {
    console.log('showErddapVehicles()');
    var fC = $.getJSON(data_file, function() {}).done(function() {
        L.geoJson(fC.responseJSON, {
            onEachFeature: function(feature, layer) {
                if (feature.id == 'track') {
                    L.geoJson(feature, {
                        style: feature.properties.style
                    }).addTo(map);
                }
                if (feature.id == 'last_pos') {
                    showLastPos(feature, map);
                }
            }
        })
    })
}
function showSeaGliders(map, data_file) {
    console.log('showSeaGliders()');
    var fC = $.getJSON(data_file, function() {}).done(function() {
        L.geoJson(fC.responseJSON, {
            onEachFeature: function(feature, layer) {
                if (feature.id == 'track') {
                    L.geoJson(feature, {
                        style: feature.properties.style
                    }).addTo(map);
                }
                if (feature.id == 'last_pos') {
                    showLastPos(feature, map);
                }
            }
        })
    })
}
function showArgoFloats(map, data_file) {
    console.log('showArgoFloats()');
    var argoMarkers = []
    var argoTrack = []
    var fC = $.getJSON(data_file, function() {}).done(function() {
        console.log('Loaded ARGO json file...');
        L.geoJson(fC.responseJSON, {
            onEachFeature: function(feature, layer) {
                if (feature.id == 'surf_marker') {
                    lon = feature.geometry.coordinates[0];
                    lat = feature.geometry.coordinates[1];
                    var marker = L.circleMarker([lat, lon], {
                        radius: 5,
                        color: 'black',
                        fillColor: 'blue',
                        fillOpacity: 1,
                        weight: .8,
                        opacity: 1
                    });
                    platformID = feature.properties.platform.toString();
                    marker.bindPopup(feature.properties.html);
                    marker.bindTooltip('ARGO Float ' + platformID);
                    argoMarkers.push(marker);
                }
                if (feature.id == 'track') {
                    console.log('adding_track');
                    var trackStyle = {
                        "color": "#FF00FF",
                        "opacity": 1,
                        "weight": 2
                    }
                    argoTrack.push(L.geoJson(feature, {
                        style: trackStyle
                    }));
                }
            }
        })
        argoMarkerLayer = L.layerGroup(argoMarkers);
        argoMarkerLayer.addTo(map);
    })
}
function showSeatrecFloats(map, data_file) {
    console.log('showSeatrecFloats()');
    var argoMarkers = []
    var argoTrack = []
    var fC = $.getJSON(data_file, function() {}).done(function() {
        console.log('Loaded Seatrec json file...');
        L.geoJson(fC.responseJSON, {
            onEachFeature: function(feature, layer) {
                if (feature.id == 'surf_marker') {
                    lon = feature.geometry.coordinates[0];
                    lat = feature.geometry.coordinates[1];
                    var marker = L.circleMarker([lat, lon], {
                        radius: 5,
                        color: 'black',
                        fillColor: 'yellow',
                        fillOpacity: 1,
                        weight: .8,
                        opacity: 1
                    });
                    platformID = feature.properties.platform.toString();
                    marker.bindPopup(feature.properties.html);
                    marker.bindTooltip('Seatrec Float ' + platformID);
                    argoMarkers.push(marker);
                }
                if (feature.id == 'track') {
                    console.log('adding_track');
                    var trackStyle = {
                        "color": "#FF00FF",
                        "opacity": 1,
                        "weight": 2
                    }
                    argoTrack.push(L.geoJson(feature, {
                        style: trackStyle
                    }));
                }
            }
        })
        argoMarkerLayer = L.layerGroup(argoMarkers);
        argoMarkerLayer.addTo(map);
    })
}
function showUgosFloats(map, data_file) {
    console.log('showUgosFloats()');
    var ugosMarkers = []
    var fC = $.getJSON(data_file, function() {}).done(function() {
        console.log('Loaded UGOS json file...');
        L.geoJson(fC.responseJSON, {
            onEachFeature: function(feature, layer) {
                if (feature.id == 'surf_marker') {
                    lon = feature.geometry.coordinates[0];
                    lat = feature.geometry.coordinates[1];
                    var marker = L.circleMarker([lat, lon], {
                        radius: 5,
                        color: 'black',
                        fillColor: 'purple',
                        fillOpacity: 1,
                        weight: .8,
                        opacity: 1
                    });
                    platformID = feature.properties.platform.toString();
                    marker.bindPopup(feature.properties.html);
                    marker.bindTooltip('UGOS Float ' + platformID);
                    ugosMarkers.push(marker);
                }
                if (feature.id == 'track') {
                    console.log('adding_track');
                    var trackStyle = {
                        "color": "#FF00FF",
                        "opacity": 1,
                        "weight": 2
                    }
                    ugosMarkers.push(L.geoJson(feature, {
                        style: trackStyle
                    }));
                }
            }
        })
        ugosMarkerLayer = L.layerGroup(ugosMarkers);
        ugosMarkerLayer.addTo(map);
    })
}
function showLastPos(feature, map) {
    console.log("showLastPos()");
    console.log("Using public_name: " + feature.properties.public_name);
    var currPosIcon = L.icon({
        iconUrl: feature.properties.currPosIcon,
        iconSize: feature.properties.iconSize
    });
    var wpIcon = L.icon({
        iconUrl: feature.properties.wpIcon,
        iconSize: feature.properties.iconSize
    });
    lon = feature.geometry.coordinates[0];
    lat = feature.geometry.coordinates[1];
    bearing = feature.properties.bearing;
    lastPos = L.marker([lat, lon], {
        icon: currPosIcon,
        rotationAngle: bearing
    });
    lastPos.bindPopup(feature.properties.html)
    lastPos.bindTooltip(feature.properties.public_name.toUpperCase());
    lastPos.getPopup().on('add', function() {
        $('#new-dash').hide();
    });
    lastPos.getPopup().on('remove', function() {
        $('#wgLegend').hide();
    });
    lastPos.addTo(map)
    if (feature.properties.waypoint_point) {
        wpLon = feature.properties.waypoint_point.coordinates[0];
        wpLat = feature.properties.waypoint_point.coordinates[1];
        wayPoint = L.marker([wpLat, wpLon], {
            icon: wpIcon
        }).addTo(map);
        wayPoint.bindPopup(feature.properties.waypoint_html)
        wayPoint.bindTooltip(feature.properties.public_name + " waypoint");
    }
}
function layerOpacity(layer, opacity) {
    layer.setOpacity(opacity);
    if ('layers'in layer.options) {
        if (layer.options.layers == 'SST/sst') {
            document.getElementById("wmsLegend").style.opacity = opacity;
        }
    }
}
function salLayerDepth(elevation) {
    console.log('salLayerDepth(): ' + elevation);
    layer = layersNS.rtofsSalinityLayer;
    layer.wmsParams.elevation = elevation;
    layer.redraw();
    elevation = elevation * -1;
    $("#salDepthWindow").text(elevation + 'm');
}
function velLayerDepth(elevation) {
    console.log('velLayerDepth(): ' + elevation);
    layer = layersNS.rtofsVelocityLayer;
    layer.wmsParams.elevation = elevation;
    layer.redraw();
    elevation = elevation * -1;
    $("#velDepthWindow").text(elevation + 'm');
}
function tempLayerDepth(elevation) {
    console.log('tempLayerDepth(): ' + elevation);
    layer = layersNS.rtofsTempLayer;
    layer.wmsParams.elevation = elevation;
    layer.redraw();
    elevation = elevation * -1;
    $("#tempDepthWindow").text(elevation + 'm');
}
function addSSl(map) {
    var imageUrl = '/gandalf/static/images/ssh.png'
        , imageBounds = L.latLngBounds([[16.65, -98.5], [31.90, -79.4]]);
    var sshLayer = L.imageOverlay(imageUrl, imageBounds);
    sshLayer.addTo(map).setOpacity(.75);
}
function ucwords(str) {
    str = str.toLowerCase();
    return (str + '').replace(/^([a-z])|\s+([a-z])/g, function($1) {
        return $1.toUpperCase();
    });
}
function teleport(latitude, longitude, teleport_zoom) {
    gandalfMap.setView([latitude, longitude], 8)
    console.log('teleport');
    $("#new-dash").hide();
}
function addHycom(map) {
    console.log('Velocity streamlines...');
    data_file = "https://geo.gcoos.org/data/hycom/hycom_surface_current.json"
    var hycom = $.getJSON(data_file, function() {}).done(function() {
        console.log('Loaded velocity streamlines data...')
        var velocityLayer = L.velocityLayer({
            displayValues: true,
            displayOptions: {
                velocityType: 'water',
                displayPosition: 'bottomleft',
                displayEmptyString: 'No water data',
                opacity: .99
            },
            data: hycom.responseJSON,
            minVelocity: 0,
            maxVelocity: 1.5,
            velocityScale: 0.9
        }).addTo(map);
    })
}
function deployPlots(vehicle) {
    console.log('deployPlots() for ' + vehicle);
    config_file = rootUrl + '/data/gandalf/gandalf_configs/vehicles/' + vehicle + '/ngdac/deployment.json';
    config = $.getJSON(config_file, function() {}).done(function() {
        var vehicle = config.responseJSON.gandalf.public_name.toLowerCase();
        var images = config.responseJSON.gandalf.plots.plot_sensor_list;
        var deployed_plot_dir = config.responseJSON.gandalf.plots.deployed_plot_dir;
        console.log(deployed_plot_dir);
        $("#new-dash").hide();
        $("#map").hide();
        $("#portalMap").hide();
        $("#gLayers").hide();
        images.forEach(function(element) {
            console.log(element);
            var img = document.createElement("IMG");
            img.src = deployed_plot_dir + "/" + element + ".png?epoch=" + Date.now();
            console.log(img.src);
            $("#plotWrapper").append(img);
        })
        $("#plotWrapper").show();
    })
}
function modComps(png_file) {
    $("#new-dash").hide();
    $("#map").hide();
    $("#portalMap").hide();
    $("#gLayers").hide();
    var img = document.createElement("IMG");
    img.src = png_file + "?epoch=" + Date.now();
    img.width = 1200;
    img.height = 600;
    $("#plotWrapper").append(img);
    $("#plotWrapper").show();
}
function deployPlots3D(vehicle) {
    console.log('deployPlots3D() for ' + vehicle);
    config_file = rootUrl + '/data/gandalf/gandalf_configs/' + vehicle + '/ngdac/deployment.json';
    config = $.getJSON(config_file, function() {}).done(function() {
        var vehicle = config.responseJSON.gandalf.public_name.toLowerCase();
        var images = config.responseJSON.gandalf.plots.plot_sensor_list;
        var deployed_plot_dir = config.responseJSON.gandalf.plots.deployed_plot_dir;
        console.log(deployed_plot_dir);
        $("#new-dash").hide();
        $("#map").hide();
        $("#portalMap").hide();
        $("#plotWrapper3D").show();
        $('#plotLoadingSpinner').show();
        var numIms = images.length;
        var index = 1;
        images.forEach(function(element) {
            $('#plotWrapper3D').append('<div id=' + element + ' class="plot3D"></div>');
            src = deployed_plot_dir + "/" + element + "3D.html";
            $("#" + element).load(src, function() {
                console.log('loading 3D plot source for plot ' + index);
                if (index == numIms) {
                    $('#plotLoadingSpinner').hide();
                } else {
                    index++;
                }
            });
        });
    })
}
function updateSummary() {
    console.log('updateSummary()')
    var data_file = rootUrl + "/data/gandalf/gandalf_configs/deployment_summaries/gandalf_sum_totals.json"
    var summary = $.getJSON(data_file, function() {}).done(function() {
        console.log('Loaded summary data file');
        $('#sum_deployments').text(summary.responseJSON.deployments);
        $('#sum_km').text(summary.responseJSON.km);
        $('#sum_days').text(summary.responseJSON.days_wet);
    })
}
function updateActiveSummary() {
    console.log('updateActiveSummary()')
    var rowCount = $('#new-dash tr').length + 1;
    var daysWet = 0;
    var index = 0;
    $('#new-dash').find('tr').each(function(rowCount) {
        if (index > 0) {
            daysWet = daysWet + Number(($(this).find("td").eq(8).html()));
            if (index == rowCount) {
                $('#active_deployments').text(rowCount);
                $('#active_days').text(daysWet);
            }
        }
        index += 1;
    })
}
var msMult = 3600000;
var gibsDate = new Date();
var layerDate = new Date(gibsDate - (24 * msMult));
var layerTime = layerDate.toISOString().split('T')[0]
var gibsMODIS1 = gibsLayer(layerTime);
layerDate = new Date(gibsDate - (48 * msMult))
layerTime = layerDate.toISOString().split('T')[0]
var gibsMODIS2 = gibsLayer(layerTime);
layerDate = new Date(gibsDate - (72 * msMult))
layerTime = layerDate.toISOString().split('T')[0]
var gibsMODIS3 = gibsLayer(layerTime);
var gibsMODIS = L.layerGroup([gibsMODIS1, gibsMODIS2, gibsMODIS3]);
var msMult = 3600000;
var gibsDate = new Date();
var layerDate = new Date(gibsDate - (24 * msMult));
var layerTime = layerDate.toISOString().split('T')[0]
var SSTLayer = gibsSSTLayer(layerTime);
function gibsLayer(gibsTime) {
    var template = '//gibs-{s}.earthdata.nasa.gov/wmts/epsg3857/best/' + '{layer}/default/{time}/{tileMatrixSet}/{z}/{y}/{x}.png';
    theLayer = L.tileLayer(template, {
        layer: 'MODIS_Aqua_L2_Chlorophyll_A',
        tileMatrixSet: 'EPSG3857_1km',
        maxZoom: 13,
        maxNativeZoom: 7,
        time: gibsTime,
        tileSize: 256,
        subdomains: 'abc',
        noWrap: true,
        continuousWorld: true,
        bounds: [[-85.0511287776, -179.999999975], [85.0511287776, 179.999999975]],
        attribution: '<a href="https://wiki.earthdata.nasa.gov/display/GIBS">' + 'NASA EOSDIS GIBS</a>&nbsp;&nbsp;&nbsp;' + '<a href="https://github.com/nasa-gibs/web-examples/blob/master/examples/leaflet/webmercator-epsg3857.js">' + 'View Source' + '</a>'
    })
    console.log('Adding gibsLayer... ' + theLayer);
    return theLayer;
}
function gibsSSTLayer(gibsTime) {
    var template = '//gibs-{s}.earthdata.nasa.gov/wmts/epsg3857/best/' + '{layer}/default/{time}/{tileMatrixSet}/{z}/{y}/{x}.png';
    gibsSSTLayer = L.tileLayer(template, {
        layer: 'GHRSST_L4_MUR_Sea_Surface_Temperature',
        tileMatrixSet: 'EPSG3857_1km',
        maxZoom: 13,
        maxNativeZoom: 7,
        time: gibsTime,
        tileSize: 256,
        subdomains: 'abc',
        noWrap: true,
        continuousWorld: true,
        bounds: [[-85.0511287776, -179.999999975], [85.0511287776, 179.999999975]],
        attribution: '<a href="https://wiki.earthdata.nasa.gov/display/GIBS">' + 'NASA EOSDIS GIBS</a>&nbsp;&nbsp;&nbsp;' + '<a href="https://github.com/nasa-gibs/web-examples/blob/master/examples/leaflet/webmercator-epsg3857.js">' + 'View Source' + '</a>'
    })
    return gibsSSTLayer;
}
var layersNS = {
    gandalfMap: L.tileLayer("https://server.arcgisonline.com/ArcGIS/rest/services/Ocean_Basemap/MapServer/tile/{z}/{y}/{x}", {
        attribution: "Tiles &copy; Esri &mdash; Sources: GEBCO, NOAA"
    }, {
        maxZoom: 17,
        maxNativeZoom: 13,
        opacity: 1
    }),
    eezLayer: L.tileLayer.wms("https://geo.vliz.be/geoserver/MarineRegions/wms?", {
        layers: 'eez_boundaries',
        format: 'image/png',
        transparent: true
    }),
    nwsNexrad: L.tileLayer.wms("https://opengeo.ncep.noaa.gov:443/geoserver/conus/conus_bref_qcd/ows?SERVICE=WMS&", {
        layers: 'conus_bref_qcd',
        format: 'image/png',
        transparent: true
    }),
    geostrophicLayer: L.tileLayer.wms("https://cwcgom.aoml.noaa.gov/thredds/wms/OCEAN_GEOSTROPHIC_CURRENTS/CURRENTS.nc", {
        layers: 'sea_water_velocity',
        format: 'image/png',
        transparent: 'true'
    }),
    rtofsSalinityLayer: L.tileLayer.wms("https://gandalf.gcoos.org:8443/ncWMS2/wms?", {
        layers: 'RTOFS/salinity',
        format: 'image/png',
        transparent: 'true',
        styles: 'default/seq-BlueHeat'
    }),
    rtofsVelocityLayer: L.tileLayer.wms("https://gandalf.gcoos.org:8443/ncWMS2/wms?", {
        layers: 'RTOFS/water_u:water_v-group',
        format: 'image/png',
        transparent: 'true',
    }),
    rtofsSSHLayer: L.tileLayer.wms("https://gandalf.gcoos.org:8443/ncWMS2/wms?", {
        layers: 'RTOFS/surf_el',
        format: 'image/png',
        transparent: 'true',
        styles: 'default/psu-plasma'
    }),
    rutgersDACLayer: L.tileLayer.wms("https://gandalf.gcoos.org:8443/ncWMS2/wms?", {
        layers: 'DAC_RTOFS/dir_depth_avg',
        format: 'image/png',
        transparent: 'true',
        styles: 'default/psu-plasma'
    }),
    lsuSSTLayer: L.tileLayer.wms("https://gandalf.gcoos.org:8443/ncWMS2/wms?", {
        layers: 'SST/sst',
        format: 'image/png',
        transparent: 'true',
        styles: 'default/x-Sst'
    }),
    hfrLayer6K: L.tileLayer.wms("https://hfrnet-tds.ucsd.edu/thredds/wms/HFR/USEGC/6km/hourly/RTV/HFRADAR_US_East_and_Gulf_Coast_6km_Resolution_Hourly_RTV_best.ncd", {
        layers: 'surface_sea_water_velocity',
        format: 'image/png',
        transparent: true
    }),
    oceanPlatformsLayer: L.tileLayer.wms("https://gis.ngdc.noaa.gov/arcgis/services/GulfDataAtlas/BOEM_DrillingPlatforms/MapServer/WmsServer?", {
        layers: '0',
        format: 'image/png',
        transparent: true,
        attribution: "GCOOS-RA, BOEM"
    }),
    noaaBagServerLayer: L.tileLayer.wms("https://gis.ngdc.noaa.gov/arcgis/services/web_mercator/nos_hydro_dynamic/MapServer/WMSServer?", {
        layers: '2',
        format: 'image/png',
        transparent: true,
        attribution: "GCOOS-RA, NOAA"
    }),
    gebcoGridLayer: L.tileLayer.wms("https://www.gebco.net/data_and_products/gebco_web_services/2022/mapserv?", {
        layers: 'gebco_latest',
        format: 'image/png',
        transparent: true,
        attribution: "GCOOS-RA, BOEM"
    }),
    noaaDepthsLayer: L.tileLayer.wms("https://gis.charttools.noaa.gov/arcgis/rest/services/MCS/ENCOnline/MapServer/exts/MaritimeChartService/WMSServer?", {
        layers: '2',
        format: 'image/png',
        transparent: true
    }),
    noaaBuoysLayer: L.tileLayer.wms("https://gis.charttools.noaa.gov/arcgis/rest/services/MCS/ENCOnline/MapServer/exts/MaritimeChartService/WMSServer?", {
        layers: '6',
        format: 'image/png',
        transparent: true
    }),
    weatherNOAALayer: L.tileLayer.wms("https://mapservices.weather.noaa.gov:443/tropical/services/tropical/NHC_tropical_weather_summary/MapServer/WMSServer?", {
        layers: '26,27,28',
        format: 'image/png',
        transparent: true
    }),
    sstLayer: L.imageOverlay(rootUrl + "/data/gandalf/modis/sst.png", [[17.9, -98], [30.9, -79]]),
    chlLayer: L.imageOverlay(rootUrl + "/data/gandalf/modis/chl.png", [[17.9, -98], [30.9, -79]]),
    sstColorBar: L.imageOverlay(rootUrl + "/data/gandalf/modis/colorbar_sst_10_to_32.png", [[25, -65], [35, -62]])
}
var lsu_sst_legend = "https://gandalf.gcoos.org:8443/ncWMS2/wms?REQUEST=";
lsu_sst_legend += "GetLegendGraphic&PALETTE=default&LAYERS=SST/";
lsu_sst_legend += "sst&STYLES=default/x-Sst";
